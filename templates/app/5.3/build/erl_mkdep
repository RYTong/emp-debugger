#!/usr/bin/env perl
#
# Copyright (c) 2009-2010 Beijing RYTong Information Technologies, Ltd.
# All rights reserved.
#
# No part of this source code may be copied, used, or modified
# without the express written consent of RYTong.
#
# Generate dependencies for erlang files under a directory.
# Dependencies are stored in styles as generated by GCC.

use strict;
use Carp;

use File::Basename;
use File::Glob ':globally';

if ($#ARGV < 1) {
    print "Usage: $0 {-I <incl_path>} <top_srcdir>\n";
    exit -1;
}

my $flag = 0;
my $hdr;
my @incl;
for (my $i = 0; $i < $#ARGV; ++$i) {
    if ($ARGV[$i] =~ /^-I/) {
        $flag = 1;
        next;
    }
    next if (!$flag);
    $flag = 0;
    my $h = $ARGV[$i];
    if ($h !~ /^\//) {
        $h = $ENV{"PWD"} . "/$h";
    }
    die "Cannot find default header directory $h.\n" unless (-d $h);
    print "incl: $h\n";
    push(@incl, $h);
}
my $top = $ARGV[$#ARGV];

# Find all *.erl files from the top directory.
my (@open, @erl);
my ($dir, $f, $ff);
push(@open, $top);
while ($#{@open} >= 0) {
    $dir = shift(@open);
    my @tmp;
    if ($dir eq "." || $dir eq "./") {
        @tmp = (<*>)
    } else {
        @tmp = (<$dir/*>);
    }
    foreach $ff (@tmp) {
        $f = basename($ff);
        if (($f ne ".") && ($f ne "..") && ($f ne ".hg") && ($f ne ".svn")) {
            push(@open, $ff) if (-d $ff);
            push(@erl, $ff) if ($ff =~ /\.erl$/);
        }
    }
}

# For each erl file, find all -include directives.
foreach $f (@erl) {
    print "Checking file $f\n";
    open(F, "<$f");
    my $f2 = basename($f);
    $f2 =~ s/^(.*)\.erl/$1\.beam/;
    my $str = "$f2: $f";
    while (<F>) {
        /^-include\("/ && do {
            $hdr = $_;
            chomp($hdr);
            $hdr =~ s/^-include\(\"(.*)\"\s*\)\s*\.[\s\r\n]*$/$1/;
            my $h = "";
            foreach my $d (@incl) {
                print "Checking $d/$hdr\n";
                if (-e "$d/$hdr") {
                    $h = "$d/$hdr";
                    next;
                }
            }
            # It's possible that hrl is in the same directory as erl.
            if ($h eq "") {
                my $d = dirname($f);
                if (-e "$d/$hdr") {
                    $h = "$d/$hdr";
                }
            }
            if ($h eq "") {
                print "Cannot find header file $hdr in file $f.\n";
                print "hdr line = $hdr\n";
                exit -1;
            }
            $str = $str . " $h";
        };
    }
    print "$str\n";
    close(F);
}
